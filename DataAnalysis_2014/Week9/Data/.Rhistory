group = SeasonAnalysis, auto.key = TRUE)
xyplot(THigh~TLow, weatherdata,
grid = TRUE,
scales = list(x = list(log = 10,equispaced.log = FALSE)),
group = SeasonAnalysis, auto.key = list(columns = 3),
col = c("red", "blue","green"),
type = c("p", "smooth"), lwd = 2, cex=2)
auto.key =list(space = "right", points = 5, lines = TRUE, cex=0.25))
setwd("R:/bkamble/V1.0/R/download/Week6")
library(ggplot2)
#Read in the data
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
weatherdata$Date <- as.Date(as.character(weatherdata$Date),format="%m/%d/%Y")
#data is attached to the R .
attach(weatherdata)
#Covert Date from dataframe to the Date format
#Trend Plot
ggplot(data=weatherdata, aes(x=as.Date(Date), y=ET))+ geom_line()+geom_point() +
xlab("Time")+ylab("ET")
q1<-qplot(as.Date(Date), TLow, data = weatherdata)
q1
#edit x lables to month and year
q1+scale_x_date(labels = Dat("%m/%d"))
#Add a smoother.
q1+  stat_smooth(span = 0.99) + geom_point()
qplot(THigh, TLow, data=weatherdata, geom=c("smooth", "point"))
q2<-ggplot(weatherdata, aes(Date, THigh), +geom_point())
qplot(THigh, TLow, data=weatherdata, geom=c("smooth", "point"))
q2<-ggplot(weatherdata, aes(Date, THigh), +geom_point())
q2
q2<-ggplot(weatherdata, aes(Date, THigh), +geom_point())
q2+ scale_x_date(labels = date_format("%W"))
q2<-ggplot(weatherdata, aes(Date, THigh), +geom_point())
q2
q2 <-ggplot(data=weatherdata, aes(x=as.Date(Date), y=ET))+ geom_point()
q2
q2 <-ggplot(data=weatherdata, aes(x=as.Date(Date), y=THigh))+ geom_point()
q2
library(scales)
q2+ scale_x_date(labels = date_format("%W"))
q2+ scale_x_date(labels = date_format("%m/%d"))
q2+scale_x_date(breaks = date_breaks("months"),labels = date_format("%b"))
q2+ scale_x_date(breaks = "1 month", minor_breaks = "1 week")
q2+stat_smooth(span = 0.1) + geom_point()
xyplot(THigh~TLow,data=weatherdata)
#Add season componet
xyplot(THigh~TLow |SeasonAnalysis, data=weatherdata, main="TLow vs THigh")
mystyle<-standard.theme("pdf") #Get basic theme
mystyle$superpose.symbol$pch<-16
mystyle$strip.background$col<-c("grey95")
xyplot(THigh~TLow |SeasonAnalysis, data=weatherdata, main="TLow vs THigh",
par.settings=mystyle)
mystyle<-standard.theme("pdf") #Get basic theme
mystyle$superpose.symbol$pch<-19
mystyle$strip.background$col<-c("grey95")
xyplot(THigh~TLow |SeasonAnalysis, data=weatherdata, main="TLow vs THigh",
par.settings=mystyle)
xyplot(THigh~TLow, weatherdata,
grid = TRUE,
scales = list(x = list(log = 10, equispaced.log = FALSE)),
group = SeasonAnalysis, auto.key = TRUE)
lattice.options(default.theme = standard.theme(color = FALSE))
sb <- trellis.par.get("strip.background")
sb[["col"]][1] <- "lightgray"
trellis.par.set("strip.background", sb)
xyplot(THigh~TLow |SeasonAnalysis, data=weatherdata, main="TLow vs THigh")
lattice.options(default.theme = standard.theme(color = TRUE))
xyplot(THigh~TLow |SeasonAnalysis, data=weatherdata, main="TLow vs THigh")
lattice.options(default.theme = standard.theme(color = FALSE))
sb <- trellis.par.get("strip.background")
sb[["col"]][1] <- "lightgray"
trellis.par.set("strip.background", sb)
xyplot(THigh~TLow |SeasonAnalysis, data=weatherdata, main="TLow vs THigh")
xyplot(THigh~TLow, weatherdata,
grid = TRUE,
scales = list(x = list(log = 10, equispaced.log = FALSE)),
group = SeasonAnalysis, auto.key = TRUE)
trellis.device(color = FALSE)
ltheme <- canonical.theme(color = FALSE) ## in-built B&W theme
ltheme$strip.background$col <- "transparent" ## change strip bg
lattice.options(default.theme = ltheme) ## set as default
xyplot(THigh~TLow |SeasonAnalysis, data=weatherdata, main="TLow vs THigh")
xyplot(THigh~TLow, weatherdata,
grid = TRUE,
scales = list(x = list(log = 10, equispaced.log = FALSE)),
group = SeasonAnalysis, auto.key = TRUE)
setwd("R:/bkamble/V1.0/R/download/Week6")
library(ggplot2)
#Read in the data
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
weatherdata$Date <- as.Date(as.character(weatherdata$Date),format="%m/%d/%Y")
#data is attached to the R .
attach(weatherdata)
#Covert Date from dataframe to the Date format
#Trend Plot
ggplot(data=weatherdata, aes(x=as.Date(Date), y=ET))+ geom_line()+geom_point() +
xlab("Time")+ylab("ET")
q1<-qplot(as.Date(Date), TLow, data = weatherdata)
q1
#edit x lables to month and year
q1+scale_x_date(labels = Dat("%m/%d"))
#Add a smoother.
q1+  stat_smooth(span = 0.99) + geom_point()
q1<-qplot(as.Date(Date), TLow, data = weatherdata)
q1
ggplot(data=weatherdata, aes(x=as.Date(Date), y=ET))+ geom_line()+geom_point() +
xlab("Time")+ylab("ET")
q1<-qplot(as.Date(Date), TLow, data = weatherdata)
q1
#edit x lables to month and year
q1+scale_x_date(labels = Dat("%m/%d"))
q1+  stat_smooth(span = 0.99) + geom_point()
# Smooth Line
qplot(THigh, TLow, data=weatherdata, geom=c("smooth", "point"))
q2 <-ggplot(data=weatherdata, aes(x=as.Date(Date), y=THigh))+ geom_point()
q2
#Install scale package
library(scales)
# Adjust scale
q2+ scale_x_date(labels = date_format("%W"))
q2+ scale_x_date(labels = date_format("%m/%d"))
q2+scale_x_date(breaks = date_breaks("months"),labels = date_format("%b"))
q2+ scale_x_date(breaks = "1 month", minor_breaks = "1 week")
q2+stat_smooth(span = 0.1) + geom_point()
q2+stat_smooth(span = 0.1) + geom_point() xlab("Time")
q2+stat_smooth(span = 0.1) + geom_point()+ xlab("Time")
q2+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
q2+theme(axis.text=element_text(size=15),
axis.title=element_text(size=14,face="bold", angle = 30))
q2+theme(axis.text=element_text(size=15, angle 20),
axis.title=element_text(size=14,face="bold", angle = 30))
q2+theme(axis.text=element_text(size=15, angle= 20),
axis.title=element_text(size=14,face="bold", angle = 30))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=10),
axis.title=element_text(size=14,face="bold", angle = 30))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=2),
axis.title=element_text(size=14,face="bold", angle = 30))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=2),
axis.title=element_text(size=14,face="bold", angle = 90))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=2),
axis.title=element_text(size=14,face="bold", angle = 180))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=2),
axis.title=element_text(size=14,face="bold", angle = 0))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=2),
axis.title=element_text(size=14,face="bold", angle = 0, hjust=2))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=2),
axis.title=element_text(size=14,face="bold", angle = 0, hjust=1))
q2+theme(axis.text=element_text(size=15, angle= 20, hjust=2),
axis.title=element_text(size=14,face="bold", angle = 0))
library(ggplot2)
library(maps)
library(ggmap)
install.packages("ggmap")
library(ggmap)
# Loading US map
statesMap = map_data("state")
####################################################################################
# PROBLEM 1 - DRAWING A MAP OF THE US
str(statesMap)
# How many different groups are there?
table(statesMap$group)
# Drawing a map
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black") + coord_map("mercator")
####################################################################################
# PROBLEM 2 - COLORING THE STATES BY PREDICTIONS
# Reading poll imputed data
polling = read.csv("PollingImputed.csv")
predFlorida = subset(predictionMap, predictionMap$Test.State=="Florida")
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "red", color = "black") + coord_map("mercator")
library(maptools)
library(ggplot2)
## Read map data from shapefile
map_bergen <- readShapeSpatial("J:\GISData\US//tl_2014_us_state.shp")
map_bergen <- readShapeSpatial("J:/GISData/US/tl_2014_us_state.shp")
# Necessary for ggplot2 fortify to run
gpclibPermit()
## Testplot raw mapdata using ggplot2
ggplot(map_bergen) +
aes(long,lat,group=group, fill = id) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_brewer("Bydeler")
## Read population data
ggplot(map_bergen) +
aes(long,lat,group=group, fill = id) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_brewer("Bydeler")
f_bergen <- fortify(map_bergen, region="BYDEL")
populationplot <-  ggplot(data = map_and_data, aes(x = long, y = lat, group = id))
data<-read.csv("Mead_Temp_19902010.csv", header=TRUE, sep = ",")
setwd("R:/bkamble/V1.0/R/download/Week9/Data/")
#Read Data
data<-read.csv("Mead_Temp_19902010.csv", header=TRUE, sep = ",")
head(data)
# read Date string as Date
data$Date <- as.Date(data$Date, "%m/%d/%Y")
#Subset data by date range
data<-data[data$Date >= as.Date("2001-01-01") & data$Date <= as.Date("2005-12-31"), ]
head(data)
attach(data)
#Seasonal Trend Decomposition using Loses
#Convert data to the time series data frame using ts function or xts from zoo package
timeT<-ts(data$Temp,frequency=365.25 )
#apply stl of the data
Temp.stl<-stl(timeT,s.window="periodic")
plot (Temp.stl)
# trend analysis using  Fit Structural Time Series
par(mar = rep(1, 4))
fit <- StructTS(timeT, type = "trend")
plot(timeT)
lines(fitted(fit), col = "green")
tsdiag(fit)
library(forecast)
fit <- auto.arima(timeT)
sensor <- ts(data$Temp)
fit <- auto.arima(timeT)
data$Date <- as.Date(data$Date, "%m/%d/%Y")
#Subset data by date range
data<-data[data$Date >= as.Date("2001-01-01") & data$Date <= as.Date("2005-12-31"), ]
head(data)
attach(data)
#Seasonal Trend Decomposition using Loses
#Convert data to the time series data frame using ts function or xts from zoo package
timeT<-ts(data$Temp,frequency=365.25 )
#apply stl of the data
Temp.stl<-stl(timeT,s.window="periodic")
plot (Temp.stl)
# trend analysis using  Fit Structural Time Series
par(mar = rep(1, 4))
fit <- StructTS(timeT, type = "trend")
plot(timeT)
setwd("R:/bkamble/V1.0/R/download/Week6")
library(ggplot2)
#Read in the data
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
weatherdata$Date <- as.Date(as.character(weatherdata$Date),format="%m/%d/%Y")
#data is attached to the R .
attach(weatherdata)
#Covert Date from dataframe to the Date format
#Trend Plot
ggplot(data=weatherdata, aes(x=as.Date(Date), y=ET))+ geom_line()+geom_point() +
xlab("Time")+ylab("ET")
head(weatherdata)
qplot(THigh, THigh, data = weatherdata)
qplot(THigh, TLow, data = weatherdata)
g<-ggplot(data, aes(date, THigh, color=factor(season)))+geom_point()
g
setwd("R:/bkamble/V1.0/R/download/Week9/Data/")
library(ggplot2)
data<-read.csv("Mead_19902010.csv", header=TRUE, sep = ",")
head(data)
data$date<-as.Date(ISOdate(data$year, data$month, data$day))
attach(data)
#A default plot in ggplot2
g<-ggplot(data, aes(date, THigh))+geom_point(color="firebrick")+ggtitle('Temperature')
g
# You can add elements to the graphics
g+theme(plot.title = element_text(size=70, face="bold", vjust=2))
g+labs(x="Date", y=expression(paste("Temperature ( ", degree ~ C, " )")), title="Temperature")
g
g+labs(x="Date", y=expression(paste("Temperature ( ", degree ~ C, " )")), title="Temperature")
g<-ggplot(data, aes(date, THigh, color=factor(season)))+geom_point()
g
myfunc <- function(x,y){data[data$date >= x & data$date <= y,]}
data_20012004 <- myfunc(as.Date("2001-01-01"),as.Date("2005-12-31"))
detach(data)
attach(data_20012004)
g <- ggplot(data, aes(x=date, y=SolarRad))+geom_line(color="grey")+geom_point(color="red")
season<- ifelse(month>10|month<3,"Winter",
(ifelse(month>2&month<6,"Spring", "Fall")))
ggplot(data_20012004, aes(date, THigh, color=factor(season)))+
geom_point() + scale_color_manual(values=c("dodgerblue4", "darkolivegreen4",
"darkorchid3", "goldenrod1"))
library(RColorBrewer)
#Categorical variables: try a built-in palette (based on colorbrewer2.org) (scale_color_brewer()):
ggplot(data_20012004, aes(date, THigh, color=factor(season)))+
geom_point() + scale_color_brewer(palette="Set1")
library(ggthemes)
ggplot(data_20012004, aes(date, THigh, color=factor(season)))+
geom_point() +
scale_colour_tableau()
data_20012004$minTh<-data_20012004$THigh-sd(data_20012004$THigh, na.rm=T)
data_20012004$maxTh<-data_20012004$THigh+sd(data_20012004$THigh, na.rm=T)
g2 <-ggplot(data_20012004, aes(date, THigh))+geom_ribbon(aes(ymin=minTh, ymax=maxTh), fill="steelblue2", color="steelblue2")+
geom_line(color="steelblue4", lwd=1)
g2
season<- ifelse(month>10|month<3,"Winter",
(ifelse(month>2&month<6,"Spring", "Fall")))
qplot(THigh, TLow, data = weatherdata, color = season)
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
weatherdata$Date <- as.Date(as.character(weatherdata$Date),format="%m/%d/%Y")
#data is attached to the R .
attach(weatherdata)
#Simple plot in ggplot
qplot(THigh, TLow, data = weatherdata)
season<- ifelse(month>10|month<3,"Winter",
(ifelse(month>2&month<6,"Spring", "Fall")))
qplot(THigh, TLow, data = weatherdata, color = season)
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
setwd("R:/bkamble/V1.0/R/download/Week6")
library(ggplot2)
#Read in the data
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
weatherdata$Date <- as.Date(as.character(weatherdata$Date),format="%m/%d/%Y")
#data is attached to the R .
attach(weatherdata)
#Simple plot in ggplot
qplot(THigh, TLow, data = weatherdata)
season<- ifelse(month>10|month<3,"Winter",
(ifelse(month>2&month<6,"Spring", "Fall")))
qplot(THigh, TLow, data = weatherdata, color = season)
summary (season)
weatherdata$season<- ifelse(month>10|month<3,"Winter",
(ifelse(month>2&month<6,"Spring", "Fall")))
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
setwd("R:/bkamble/V1.0/R/download/Week9/Data/")
library(ggplot2)
#Read in the data
weatherdata<-read.csv("Mead_Temp_19902010.csv", header=TRUE, sep = ",")
weatherdata$date<-as.Date(ISOdate(data$year, data$month, data$day))
head(weatherdata)
weatherdata$Date <- as.Date(as.character(weatherdata$Date),format="%m/%d/%Y")
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
setwd("R:/bkamble/V1.0/R/download/Week6")
library(ggplot2)
#Read in the data
weatherdata<-read.table(file = "Data/mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
season<- ifelse(TLow<40,"Winter",
(ifelse(TLow>40&TLow<60,"Spring", "Fall")))
qplot(THigh, TLow, data = weatherdata, color = season)
ggplot(data=weatherdata, aes(x=as.Date(Date), y=ET))+ geom_line()+geom_point() +
xlab("Time")+ylab("ET")
q1<-qplot(as.Date(Date), TLow, data = weatherdata)
q1
#Add a smoother.
q1+  stat_smooth(span = 0.99) + geom_point()
# Smooth Line
qplot(THigh, TLow, data=weatherdata, geom=c("smooth", "point"))
q2 <-ggplot(data=weatherdata, aes(x=as.Date(Date), y=THigh))+ geom_point()
q2
#Install scale package
library(scales)
# Adjust scale
q2+ scale_x_date(labels = date_format("%W"))
q2+ scale_x_date(labels = date_format("%m/%d"))
setwd("R:/bkamble/V1.0/R/download/Week6")
#Read in the data
weatherdata<-read.table(file = "mead_2013.txt", header=TRUE, sep = "")
head(weatherdata)
mydata<-read.table(file = "mead_2013.txt", header=TRUE, sep = "")
setwd("R:/bkamble/V1.0/R/download/Week6")
library(stargazer)
install.packages("stargazer") #Use this to install it, do this only once
library(stargazer)
mydata<-read.table(file = "mead_2013.txt", header=TRUE, sep = "")
setwd("\\SNR15\Web\bkamble\V1.0\r-pac\download\Day2\Data")
setwd("R:\bkamble\V1.0\r-pac\download\Day2\Data")
setwd("R:/bkamble/V1.0/R/download/Week9/Data/")
mydata<-read.table(file = "mead_2013.txt", header=TRUE, sep = "")
mydata<-read.table(file = "Mead_19902010.csv", header=TRUE, sep = "")
head(mydata)
mydata<-read.table(file = "Mead_19902010.csv", header=TRUE, sep = ",")
mydata<-read.csv(file = "Mead_19902010.csv", header=TRUE, sep = ",")
head(mydata)
attach(mydata)
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt")
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt", flip=TRUE)
# Descriptive statistics: in text format, replacing variable names with labels
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt",
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt",
covariate.labels=c("Miles/(US)gallon","No. of cylinders","Displacement (cu.in.)",
"Gross horsepower","Rear axle ratio","Weight (lb/1000)",
"1/4 mile time","V/S","Transmission (0=auto, 1=manual)",
"Number of forward gears","Number of carburetors"))
)
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt",
covariate.labels=c("Miles/(US)gallon","No. of cylinders","Displacement (cu.in.)",
"Gross horsepower","Rear axle ratio","Weight (lb/1000)",
"1/4 mile time","V/S","Transmission (0=auto, 1=manual)",
"Number of forward gears","Number of carburetors"))
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt")
stargazer(mydata, type = "text", title="Descriptive statistics", digits=10, out="table1.txt")
stargazer(mydata)
stargazer(mydata, summary=FALSE)
stargazer(mydata, type=html)
stargazer(mydata, type="html")
stargazer(mydata, type="html",  summary = FALSE)
head(mydata)
mydata <- mydata[5:10, ]
stargazer(mydata, type="html",  summary = FALSE)
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt")
setwd("R:/bkamble/V1.0/R/download/Week9/Data/")
mydata<-read.csv(file = "Mead_19902010.csv", header=TRUE, sep = ",")
head(mydata)
mydata <- mydata[5:10, ]
head(mydata)
mydata <- mydata[,5:10]
head(mydata)
setwd("R:/bkamble/V1.0/R/download/Week9/Data/")
mydata<-read.csv(file = "Mead_19902010.csv", header=TRUE, sep = ",")
#check the data
head(mydata)
#subset the data fewer columns
mydata <- mydata[,5:10]
attach(mydata)
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt")
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt", flip=TRUE)
# Descriptive statistics: in text format, replacing variable names with labels
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt",
covariate.labels=c("Miles/(US)gallon","No. of cylinders","Displacement (cu.in.)",
"Gross horsepower","Rear axle ratio","Weight (lb/1000)",
"1/4 mile time","V/S","Transmission (0=auto, 1=manual)",
"Number of forward gears","Number of carburetors"))
#Descriptive statistics: in text format, selected variables
mydata<-read.csv(file = "Mead_19902010.csv", header=TRUE, sep = ",")
#check the data
head(mydata)
stargazer(mydata[c("THigh","RelHum","SoilTemp", "WindSpeed")], type = "text",
title="Descriptive statistics/selected variables", digits=1, out="table2.txt", flip=TRUE,
covariate.labels=c("Maximum Temperature","Relative Humidity","Soil Temperature", "Windspeed"))
#same output transposed and with labels instead of variable names
stargazer(mydata[c("THigh","RelHum","SoilTemp", "WindSpeed")], type = "text",
title="Descriptive statistics/selected variables", digits=1, out="table2.txt", flip=TRUE,
covariate.labels=c("Maximum Temperature","Relative Humidity","Soil Temperature", "Windspeed"))
head(mydata)
setwd("R:/bkamble/V1.0/r-pac/download/Day2/Data")
mydata<-read.csv(file = "Mead_19902010.csv", header=TRUE, sep = ",")
mydata<-read.table(file = "mead_2013", header=TRUE, sep = "/t")
mydata<-read.table(file = "mead_2013.txt", header=TRUE, sep = "/t")
#check the data
mydata<-read.table(file = "mead_2013.txt", header=TRUE, sep = "")
#check the data
head(mydata)
attach(mydata)
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt")
stargazer(mydata, type = "text", title="Descriptive statistics", digits=1, out="table1.txt", flip=TRUE)
stargazer(mydata[c("THigh","RelHum","WindSpeed")], type = "text",
title="Descriptive statistics/selected variables", digits=1, out="table2.txt")
#same output transposed and with labels instead of variable names
stargazer(mydata[c("THigh","RelHum","SoilTemp", "WindSpeed")], type = "text",
title="Descriptive statistics/selected variables", digits=1, out="table2.txt", flip=TRUE,
covariate.labels=c("Maximum Temperature","Relative Humidity","Soil Temperature", "Windspeed"))
library(psych)
install.packages("psych")
library(psych)
describe(mydata)
setwd("R:/bkamble/V1.0/R/download/Week9/Data/")
#Read Data
data<-read.csv("Data/Mead_Temp_19902010.csv", header=TRUE, sep = ",")
data<-read.csv("Mead_Temp_19902010.csv", header=TRUE, sep = ",")
head(data)
# read Date string as Date
data$Date <- as.Date(data$Date, "%m/%d/%Y")
#Subset data by date range
data<-data[data$Date >= as.Date("2001-01-01") & data$Date <= as.Date("2005-12-31"), ]
head(data)
attach(data)
# calculate weeks and numerical week day
Temp.data <- transform(Temp,
week = as.POSIXlt(Date)$yday %/% 7 + 1,
wday = as.POSIXlt(Date)$wday,
year = as.POSIXlt(Date)$year + 1900)
head(Temp.data)
# Color ramp
color1=c("#00007F","#0000FF","#007FFF","#00FFFF","#7FFF7F","#FFFF00","#FF7F00","#FF0000","#7F0000")
color2=c("#000000","#7F0000","#FF0000","#FFA500","#F5F5DC","#D2B38C","#40E0D0","#7FFF00","#006400","#0000FF","#FF00FF")
color3=c("#FF00FF","#0000FF","#006400","#7FFF00","#40E0D0","#D2B38C","#F5F5DC","#FFA500","#FF0000","#7F0000","#000000")
# Call ggplot2
library(ggplot2)
# plot heat map
ggplot(Temp.data, aes(week, wday, fill = Temp)) +
geom_tile(colour = "white") +
scale_fill_gradientn(colours = color3) +
facet_wrap(~ year, ncol = 1) +
scale_x_continuous(breaks = round (seq(min(Temp.data$week), max(Temp.data$week), 3)))
Temp.data <- transform(Temp,
week = as.POSIXlt(Date)$yday %/% 7 + 1,
wday = as.POSIXlt(Date)$wday,
year = as.POSIXlt(Date)$year + 1900)
head(Temp.data)
color3=c("#FF00FF","#0000FF","#006400","#7FFF00","#40E0D0","#D2B38C","#F5F5DC","#FFA500","#FF0000","#7F0000","#000000")
# Call ggplot2
library(ggplot2)
# plot heat map
ggplot(Temp.data, aes(week, wday, fill = Temp)) +
geom_tile(colour = "white") +
scale_fill_gradientn(colours = color3) +
facet_wrap(~ year, ncol = 1) +
scale_x_continuous(breaks = round (seq(min(Temp.data$week), max(Temp.data$week), 3)))
ggplot(diamonds, aes(x=cut, y=price, group=cut))+
geom_boxplot(aes(fill=cut))+scale_fill_brewer(palette="OrRd")
qplot(mpg, wt, data = mtcars) +
theme_bw()
q1<- qplot(mpg, wt, data = mtcars)
q1
q1+theme_bw()
q2<-ggplot(diamonds, aes(x=cut, y=price, group=cut))+
geom_boxplot(aes(fill=cut))+scale_fill_brewer(palette="OrRd")
q2+theme_bw()
q2+scale_fill_grey()()
q2+scale_fill_grey()
